'use strict';

/* Iepriekšējās lekcijās mēs izskatījām veidus kā mēs varam meklēt elementus datu masīvā. Lielākos elementus, unikālus elementus, elementus jau sašķirotā datu masīvā. Bet šinī lekcijā, mēs izskatīsim veidu: kā vēl vienkāršāk mēs varam meklēt kādus elementus jau sašķirotā datu masīvā, ātri un efektīvi. Kā piemēru varam iedomāties situāciju, ka mūsu kursā mums ir jāatrod studenti, kas gala eksāmenā ir ieguvuši vismaz 7.3 balles, lai šo studentu varētu apbalvot. Mums ir dots datu masīvs, kas ir sašķirots augošā secībā, un mums iekš tā skaitļiem jāatrod skaitlis: 7.3. Mēs varētu šķirot masīvu izejot cauri visiem tā elementiem, bet mums ir labāks risinājums kā mēs varam atrast konkrēto studentu neizejot cauri visam datu masīvam. Mūsu datu masīvā ir arī lielāki skaitļi par 73, bet mums ir vajadzīgs tieši skaitlis: 73. Atceramies, ka katru reizi risinot kādu uzdevumu mums ir rūpīgi jāizlasa uzdevuma nosacījumi, un iespējams mēs atradīsim kādu norādi, lai vieglāk atrisinātu uzdevumu. */

/* Lai atrisinātu šo uzdevumu mēs talkā ņemam binārās meklēšanas algoritmu. Kas ir binārā meklēšana? Binārā meklēšana ir tad, kad lai atrastu kādus datus, kādu noteiktu elementu datu masīvā, mēs datu masīvu dalām uz pusēm, izvēloties vidējo vērtību, salīdzinām to ar mūsu meklējamo skaitli, vai tas ir lielāks vai mazāks par mūsu meklējamo skaitli, kā rezultātā mēs izslēdzam datu masīva labo jeb kreiso pusi, no meklēšanas. Un skatoties uz atlikušajiem elementiem mēs šo darbību - sadalīšanas darbību uz pusēm varam atkārtot, kamēr atrodam vajadzīgo elementa lielumu. */

/* Šādi no datu masīva, kas satur 21 elementus, mēs varam atrast jeb kuru elementa vērtību, sliktākajā gadījumā izpildot tikai četras darbības. Lai atrastu skaitli, iekš datu masīva, kas satur 21 elementus mums jāizpilda datu masīva sadalīšana trīs reizes, ceturtajā darbībā mēs salīdzinām divus atlikušos elementus, kur viens no tiem ir mūsu meklētais skaitlis: 92. Bet šādu pieeju mēs varam izmantot tikai pie tāda nosacījuma, ka datu masīvs ir sašķirots. Jo, ja tas nav sašķirots tad šādam algoritmam nav jēgas, jo mums ir jāiziet cauri visiem 21 elementiem. */

/* Šāda uzdevuma risināšanas pieeja saucās: Binārā šķirošana. Tas ir tad, kad mums ir binārā izvēlē, mēs sadalām datu masīvu uz pusēm, un atkarīgi no meklējamā elementa lieluma atmetam labo jeb kreiso pusi. Izpildām šādu darbību, kamēr atliek tikai 1 jeb 2 elementi. Izpildām salīdzināšanu un mēs esam atraduši vajadzīgo datu masīva elementu. Šāda pieeja mums ļauj atrast jebkāda elementa lielumu jebkāda izmēra datu masīvā. Mēs to varam izdarīt daudz ātrāk nekā ar parastu šķirošanu. */

/* Pieeja, kad mēs kādu uzdevumu dalām uz pusēm, un pēc tam atlikušos uzdevumu pusi dalām vēl uz pusēm utt, sauc par pieeju: Dali un valdi! Šāda pieeja tiek izmantota lielos un sarežģītos uzdevumos. Tas attiecās uz jebkāda tipa uzdevumiem, ne tikai uz algoritmiskiem uzdevumiem. Piemēram, kad izstrādājam kādu lapu, kas kopēji ir liels uzdevums un mēs nezinām kā to izdarīt. Mēs kopējo uzdevumu sadalām daudzos mazos uzdevumos, un sākam pamazām pildīt. Šī pieeja arī ir: Dali un valdi. Tālāk kursā mēs izskatīsim daudzus piemērus, kur tike pielietota šī pieeja: Dali un valdi!. */